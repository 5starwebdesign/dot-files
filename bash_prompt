#! /bin/bash
# Requires Powerline patched fonts: https://gist.github.com/1595572
# Colors from http://www.arwin.net/tech/bash.php

case "$TERM" in
    xterm-color) 
		color_prompt=yes
	;;
	xterm-256color) 
		color_prompt=yes
	;;
esac

SEPARATOR="⮀"
SEPARATOL="⮂"
BRANCH="⭠"
MASTER="☰"

C_WHITE='37'
C_BLACK='30'
C_GREEN='32'
C_CYAN='36'
C_RED='31'

C_BLACK_BOLD="1;$C_BLACK"
C_GREEN_BOLD="1;$C_GREEN"
C_CYAN_BOLD="1;$C_CYAN"
C_RED_BOLD="1;$C_RED"

C_BG_BLACK='40'
C_BG_CYAN='46'
C_BG_YELLOW='43'
C_BG_GREEN='42'

# pass foreground then background (optional)
function _color() {
	local PROMPT_COLOR_OUTPUT="\[\e[0m\]"
	
	if ! [ -z $1 ]; then
		PROMPT_COLOR_OUTPUT="\[\e[$1m\]"
	fi

	if ! [ -z $2 ]; then
		PROMPT_COLOR_OUTPUT="\[\e[$2m\]${PROMPT_COLOR_OUTPUT}"
	fi
	
	echo $PROMPT_COLOR_OUTPUT
}

function _gitStatus() {	
	if ! [ `type -t __git_ps1`"" == 'function' ]; then
		return
	fi
	
	local FORBIDDEN="homebrew.git"
	local GIT_STATUS_TEXT="$(__git_ps1 "%s")"
	
	if [[ -n "$GIT_STATUS_TEXT" ]]; then
		local GIT_REPO=''
		local GIT_REMOTE=`git remote -v`		
		local SHOW_GIT=1

		if ! [ -z "$GIT_REMOTE" ]; then	
			GIT_REPO=$(basename `echo $GIT_REMOTE | grep origin | grep push | awk '{print $2;}'`)
			for REPO in $FORBIDDEN; do
				if [ $GIT_REPO = $REPO ]; then
					SHOW_GIT=0
				fi
			done
			GIT_REPO="$GIT_REPO "
		fi
		
		if [ $SHOW_GIT = 1 ]; then
			SYMBOL=$BRANCH
			if [ "$GIT_STATUS_TEXT" == "master" ]; then
				SYMBOL=$MASTER
			fi
			GIT_STATUS="$(_color $C_BLACK_BOLD $C_BG_GREEN)${SEPARATOR}$(_color)$(_color $C_WHITE $C_BG_GREEN) ${GIT_REPO}${SYMBOL} ${GIT_STATUS_TEXT}$(_color)$(_color $C_GREEN)${SEPARATOR}$(_color)"
		fi
	fi
	
	echo $GIT_STATUS
}

function _svnStatus() {
	local SVN_STATUS_TEXT=''
	local REVISION=$(svn info 2>/dev/null | awk '/^Revision:/{print $2}')
	
	if ! [ -z "$REVISION" ]; then
		local REPO_NAME=$(basename `svn info 2>/dev/null | awk '/^Repository Root:/{print $3}'`)
		SVN_STATUS_TEXT="$(_color $C_BLACK $C_BG_CYAN)${SEPARATOR}$(_color)$(_color $C_BLACK $C_BG_CYAN) ${REPO_NAME} r:${REVISION}$(_color)$(_color $C_CYAN)${SEPARATOR}$(_color)";
	fi
	
	echo "$SVN_STATUS_TEXT"
}

function _pythonVirtualenv() {
    local PYTHON_VIRTUALENV=""
    	
    if ! [ -z "$VIRTUAL_ENV" ]; then
        PYTHON_VIRTUALENV="$(_color $C_WHITE $C_BG_YELLOW)foo`basename \"$VIRTUAL_ENV\"` $(_color)$(_color $C_BLACK_BOLD $C_BG_YELLOW)${SEPARATOL}$(_color)"
    fi
	
	echo "$PYTHON_VIRTUALENV"
}

function _prompt() {	
	local LAST_RETURN=$?
	
	local STATUS_COLOR="$C_GREEN_BOLD"
	
	if ! [[ $LAST_RETURN -eq 0 ]]; then
		STATUS_COLOR="$C_RED_BOLD"
	fi

	local LOCAL_HOSTNAME=`scutil --get LocalHostName`
	local PYTHON_VIRTUALENV=$(_pythonVirtualenv)

	local GIT_STATUS=$(_gitStatus)
	local SVN_STATUS=$(_svnStatus)
		
	SCM_STATUS="$(_color $C_BLACK)${SEPARATOR}$(_color)"
	if ! [ -z "$GIT_STATUS" ]; then
		SCM_STATUS="$GIT_STATUS"
	elif ! [ -z "$SVN_STATUS" ]; then
		SCM_STATUS="$SVN_STATUS"
	fi
			
	PROMPT="$(_color $C_BG_BLACK $C_WHITE)\u$(_color)${SCM_STATUS} \w $(_color "$STATUS_COLOR")\$$(_color) "
	PS1=${PYTHON_VIRTUALENV}${PROMPT}
}

if [ "$color_prompt" = yes ]; then
    PROMPT_COMMAND=_prompt
else
	PS1='\[\e[1;32m\]\u@\h \W:$(__git_ps1) \$\[\e[0m\] '
fi
unset color_prompt